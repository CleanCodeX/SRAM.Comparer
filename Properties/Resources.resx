<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="QueuedCommands" xml:space="preserve">
    <value>Queued commands</value>
  </data>
  <data name="AppManualCommandsTemplate" xml:space="preserve">
    <value>Steps: 
1.1) Have a look at http://unknowns.xeth.de to see examples of what parts of SRAM structure are still 
     considered as unknown.
1.2) Most emulators have the option to save the game's S-RAM automatically after a change occurs. 
     Make sure this is enabled if existing. Otherwise you have manually ensure that the emulator updates 
     the *.srm file.
1.3) Start the application by passing the game's srm filepath as first command parameter. The file can also be 
     dragged onto the application.

2)   Then press ({0}) to create a comparison copy of your current SRAM file. This allows to compare with after the current SRAM file changed.

3.1) Cause in-game a SRAM change. (e.g. let a game progress event happen or 
    open an unopened chest) To force the SRAM file to be updated, save your game in-game at the inn.
3.2) Press ({1}) to compare the current srm file with comparison file. 
     (If the SRAM file did not change at all, you probably did not save in-game or the emulator didn't
     (yet!) update the SRAM (srm) file automatically. Check the modification date of the game's srm file.
     For Example: Snes9x's default srm update period is 30 seconds. Decrease it to a lower value, like 1 second,
     but not to 0 (which deactivates the automatism).

4.1) Make sure you change as less as possible during two saves to avoid unnecessary noise. As soon as you can clearly assign a change in the game to a change in SRAM, you have found a meaning for this specific offset. Once you're able to  assigning an in-game uniquely a change of SRAM you found a meaning for that offset. Then press ({2}) to export the comparison result to a textfile in your export directory. 
4.2) Rename the file expressing your current discovery. 
     If it is reproducable, consider to report the exported file to the tool's creator 
     and/or contribute the change to SRAM structure to the tool's github repository.

4.1) Make sure to change as little as possible between two saves to avoid unnecessary noise. Alleged assignments are often just coincidence.
4.2) As soon as you can clearly assign a change in the game to a change in the SRAM, you have found a meaning for this specific offset. Then press ({2}) to export the comparison result as a text file in your export directory.
4.3) Rename the file according to your find.
4.4) Check whether the change found also occurs in other game versions. E.g. unpatched or patched versions.
4.5) Verify that it's reproducible, report the find via community.xeth.de. If necessary, create a pull request for a change to the documentation and the SRAM structure in the GitHub repository..

5)   To start a new comparison without previous SRAM changes, press again ({0}) to save your current SRAM file 
     as comparison file. Then start again at step 3.1.

6.1) (optional) If you have more than one slot with changes to comparison file, press ({3}) to
     set the game's save slot (1-4) to avoid comparing other save slots. If two different save slots should be 
     compared with each other, additionally press ({4}) to set the the slot of comparison file, too.
6.2) (optional) Press ({5} | {6}) to set comparison modes. 
     If you are unsure, leave at default to compare as less as possible bytes.

7)   (optional) Current and comparison srm file can be backed-up ({7}|{8}) or restored ({9}|{10}) individually.

8)   (optional) SRAM offset values for specific save slots can be displayed by pressing ({11}) or manipulated by ({12}). You can decide whether to update your current SRAM file (backup recommended) or creating a new file.
    </value>
  </data>
  <data name="ErrorMissingPathArguments" xml:space="preserve">
    <value>ERROR: The program needs to be started with at least the path to current SRAM file as a parameter. Drag 'n' drop can be used.</value>
  </data>
  <data name="StatusBytesChangedTemplate" xml:space="preserve">
    <value>{0} bytes changed</value>
  </data>
  <data name="CurrentSramFileSaveSlot" xml:space="preserve">
    <value>Save slot (current file)</value>
  </data>
  <data name="ComparisonSramFileSaveSlot" xml:space="preserve">
    <value>Save slot (Comparison file)</value>
  </data>
  <data name="GameRegion" xml:space="preserve">
    <value>game region</value>
  </data>
  <data name="ColorizeOutput" xml:space="preserve">
    <value>Colorize output</value>
  </data>
  <data name="ComparisonFlags" xml:space="preserve">
    <value>Comparison flags</value>
  </data>
  <data name="SettinComparegNonGameBuffer" xml:space="preserve">
    <value>Compare non-save slot area</value>
  </data>
  <data name="SettingCompareWholeGameBuffer" xml:space="preserve">
    <value>Compare whole save slot area</value>
  </data>
  <data name="ComparisonSramFilepath" xml:space="preserve">
    <value>Comparison SRAM filepath</value>
  </data>
  <data name="ExportDirectory" xml:space="preserve">
    <value>Export directory</value>
  </data>
  <data name="CurrentSramFilepath" xml:space="preserve">
    <value>Current SRAM filepath</value>
  </data>
  <data name="StatusSingleSaveSlotWillBeComparedTemplate" xml:space="preserve">
    <value>Only save slot {0} will be compared.</value>
  </data>
  <data name="StatusOffsetWillBeUsedTemplate" xml:space="preserve">
    <value>Offset {0} will be used.</value><comment>The term Offset should only be translated if not understandable</comment>
  </data>
  <data name="StatusOffsetValueWillBeUsedTemplate" xml:space="preserve">
    <value>Offset value {0} will be set.</value><comment>The term Offset should only be translated if not understandable</comment>
  </data>
  <data name="StatusAllSaveSlotsWillBeCompared" xml:space="preserve">
    <value>All save slots will be compared.</value>
  </data>
  <data name="SramOffset" xml:space="preserve">
    <value>SRAM offset</value><comment>The term Offset should only be translated if not understandable</comment>
  </data>
  <data name="ErrorCannotOpenOutputFileTemplate" xml:space="preserve">
    <value>Cannot open output file "{0}" for writing</value>
  </data>
  <data name="AppDescription" xml:space="preserve">
    <value>This tool compares unknown areas in SRAM.</value>
  </data>
  <data name="ErrorCommandNotImplementedTemplate" xml:space="preserve">
    <value>Command ({0}) needs to be implemented by caller.</value>
  </data>
  <data name="None" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="StatusCurrentSramFileHasBeenSaved" xml:space="preserve">
    <value>Current SRAM file has been saved as comparison SRAM file</value>
  </data>
  <data name="StatusCurrentSramFileHasBeenBackedUpTemplate" xml:space="preserve">
    <value>{0} has been backed-up</value>
  </data>
  <data name="StatusSramFileHasBeenRestoredFromBackupTemplate" xml:space="preserve">
    <value>{0} has been restored from backup</value>
  </data>
  <data name="CommandListCommands" xml:space="preserve">
    <value>List commands</value>
  </data>
  <data name="CommandManual" xml:space="preserve">
    <value>Manual</value>
  </data>
  <data name="CommandSetCurrentSrramFileSaveSlot" xml:space="preserve">
    <value>Set current SRAM file's save slot</value>
  </data>
  <data name="CommandSetComparisonSramFileSaveSlot" xml:space="preserve">
    <value>Set comparison SRAM file's save slot</value>
  </data>
  <data name="CommandSettings" xml:space="preserve">
    <value>Display settings</value>
  </data>
  <data name="SlotByteByByteComparison" xml:space="preserve">
    <value>Slot byte-by-byte comparison</value>
  </data>
  <data name="NonSlotByteByByteComparison" xml:space="preserve">
    <value>Non-slot byte-by-byte comparison</value>
  </data>
  <data name="CommandSlotByteByBytesComparison" xml:space="preserve">
    <value>Add slot byte-by-byte comparison</value>
  </data>
  <data name="CommandNonSlotByteByByteComparison" xml:space="preserve">
    <value>Add non-slot byte-by-byte comparison</value>
  </data>
  <data name="CommandOffsetValue" xml:space="preserve">
    <value>Display offset value</value>
  </data>
  <data name="CommandModifyOffsetValue" xml:space="preserve">
    <value>Modify (and save) offset value</value><comment>The term Offset should only be translated if not understandable</comment>
  </data>
  <data name="SetSaveSlotToCompareMaxTemplate" xml:space="preserve">
    <value>Set save slot (1-{0} or any other key for all save slots) to compare:</value>
  </data>
  <data name="SetSingleSaveSlotMaxTemplate" xml:space="preserve">
    <value>Set save slot (1-{0}):</value>
  </data>
  <data name="StatusSetSingleSaveSlotMaxTemplate" xml:space="preserve">
    <value>Save slot {0} will be used.</value>
  </data>
  <data name="GetSaveSlotOffsetTemplate" xml:space="preserve">
    <value>Set Save slot {0} offset:</value><comment>The term Offset should only be translated if not understandable</comment>
  </data>
  <data name="GetSaveSlotOffsetValue" xml:space="preserve">
    <value>Set Save slot offset value:</value><comment>The term Offset should only be translated if not understandable</comment>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Comparison" xml:space="preserve">
    <value>Comparison</value>
  </data>
  <data name="Current" xml:space="preserve">
    <value>Current</value>
  </data>
  <data name="Offset" xml:space="preserve">
    <value>Offset</value><comment>This term should only be translated if not understandable</comment>
  </data>
  <data name="ChangeShort" xml:space="preserve">
    <value>Change</value>
  </data>
  <data name="Old" xml:space="preserve">
    <value>Old</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="CurrentShort" xml:space="preserve">
    <value>Curr</value><comment>This is an abbreviation and should be kept as short as possible</comment>
  </data>
  <data name="ComparisonShort" xml:space="preserve">
    <value>Comp</value><comment>This is an abbreviation and should be kept as short as possible</comment>
  </data>
  <data name="StatusTotalDiffBytesTemplate" xml:space="preserve">
    <value>Total: {0} bytes changed (outside save slot area)</value>
  </data>
  <data name="UnknownAreasOnly" xml:space="preserve">
    <value>Unknowns only</value>
  </data>
  <data name="StatusUnknownsChangedBytesTemplate" xml:space="preserve">
    <value>Unknowns only: {0} bytes changed</value>
  </data>
  <data name="Section" xml:space="preserve">
    <value>Section</value>
  </data>
  <data name="SectionSaveSlotChangedTemplate" xml:space="preserve">
    <value>All (knowns + unknowns)</value>
  </data>
  <data name="StatusSaveSlotChangedBytesTemplate" xml:space="preserve">
    <value>All (knowns + unknowns): {0} bytes changed</value>
  </data>
  <data name="SectionNonSaveSlotUnknowns" xml:space="preserve">
    <value>Non-save slot unknowns</value>
  </data>
  <data name="StatusNonSaveSlotUnknownsBytesTemplate" xml:space="preserve">
    <value>Unknown non-save slot area: {0} bytes changed</value>
  </data>
  <data name="StatusSramChangedBytesTemplate" xml:space="preserve">
    <value>{0} SRAM bytes changed</value>
  </data>
  <data name="StatusCurrentComparisonExportedFilepathTemplate" xml:space="preserve">
    <value>Current comparison exported to "{0}"</value>
  </data>
  <data name="StatusNoSramBytesChanged" xml:space="preserve">
    <value>No SRAM bytes changed</value>
  </data>
  <data name="Size" xml:space="preserve">
    <value>Size</value>
  </data>
  <data name="Bytes" xml:space="preserve">
    <value>bytes</value>
  </data>
  <data name="CommandOverwriteComparisonSramFile" xml:space="preserve">
    <value>Overwrite (or create) comparison file with current SRAM file</value>
  </data>
  <data name="CommandBackupCurrentSramFile" xml:space="preserve">
    <value>Back-up current SRAM file</value>
  </data>
  <data name="CommandRestoreCurrentSramFile" xml:space="preserve">
    <value>Restore current SRAM file from backup</value>
  </data>
  <data name="CommandBackupComparisonSramFile" xml:space="preserve">
    <value>Back-up comparison SRAM file</value>
  </data>
  <data name="CommandRestoreComparisonSramFile" xml:space="preserve">
    <value>Restore comparison SRAM file from backup</value>
  </data>
  <data name="CommandCompareFile" xml:space="preserve">
    <value>Compare current SRAM file with comparison file</value>
  </data>
  <data name="CommandWipeOutput" xml:space="preserve">
    <value>Wipe previous console output</value>
  </data>
  <data name="CommandExportComparisonResult" xml:space="preserve">
    <value>Export current comparison result</value>
  </data>
  <data name="CommandSaveCurrentSramFileAsOtherFileName" xml:space="preserve">
    <value>Save current-SRAM file with other game file's name</value>
  </data>
  <data name="CommandQuit" xml:space="preserve">
    <value>Quit</value>
  </data>
  <data name="ErrorOperationAborted" xml:space="preserve">
    <value>Operation aborted</value>
  </data>
  <data name="EnterCommand" xml:space="preserve">
    <value>Enter command and press enter.</value>
  </data>
  <data name="StartMessage" xml:space="preserve">
    <value>New here? For command list use ({0}|?) or ({1}) for manual</value>
  </data>
  <data name="SaveSlot" xml:space="preserve">
    <value>Save slot</value>
  </data>
  <data name="All" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="Sram" xml:space="preserve">
    <value>SRAM</value>
  </data>
  <data name="Backup" xml:space="preserve">
    <value>Backup</value>
  </data>
  <data name="ErrorComparisonFileDoesNotExist" xml:space="preserve">
    <value>The comparison file "{0}" has not been created yet. Please create one first.</value>
  </data>
  <data name="ErrorNoValidCommandCmdTemplate" xml:space="preserve">
    <value>"{0}" is an unknown command. To list all available commands enter ({1}).</value>
  </data>
  <data name="ErrorComparisonSramSaveSlotSetButNotCurrentSramSaveSlot" xml:space="preserve">
    <value>Save slot for comparison SRAM file can only be set if current SRAM file's save slot is set first.</value>
  </data>
  <data name="SameAsCurrentSramFileSaveSlot" xml:space="preserve">
    <value>Same as current SRAM file' save slot</value>
  </data>
  <data name="CmdGroupBackup" xml:space="preserve">
    <value>Backup</value>
  </data>
  <data name="CmdGroupComparison" xml:space="preserve">
    <value>Comparison</value>
  </data>
  <data name="CmdGroupSetsSaveSlotId" xml:space="preserve">
    <value>Set save slot-ID</value>
  </data>
  <data name="CmdMisc" xml:space="preserve">
    <value>Miscellaneous</value>
  </data>
  <data name="CmdGroupDisplay" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="CurrentSramFile" xml:space="preserve">
    <value>Current-SRAM file</value>
  </data>
  <data name="ComparisonSramFile" xml:space="preserve">
    <value>Comparison-SRAM file</value>
  </data>
  <data name="ErrorFileIsNotSrmFileTypeFilepathTemplate" xml:space="preserve">
    <value>{0} current file must have .srm file extension. Did you just forget to quote the path? Was: {1}</value>
  </data>
  <data name="ErrorCompSaveSlotFileIsNotCompFileTypeFilepathTemplate" xml:space="preserve">
    <value>{0} comparison file must have .comp file extension. Did you just forget to quote the path? Was: {1}</value>
  </data>
  <data name="StatusCurrentSramHasBeenSavedAsFilepathTemplate" xml:space="preserve">
    <value>Current SRAM file has been copied as {0}.</value>
  </data>
  <data name="StatusTargetSramFileHasBeenBackedUpFilepathTemplate" xml:space="preserve">
    <value>Target SRAM file has been backed up as {0}.</value>
  </data>
  <data name="StatusModifiedSramFileHasBeenSavedAsFilepathTemplate" xml:space="preserve">
    <value>Changed current SRAM File has been saved as {0}.</value>
  </data>
  <data name="StatusGetOffsetValueTemplate" xml:space="preserve">
    <value>Value at offset {0} is {1}.</value><comment>The term Offset should only be translated if not understandable</comment>
  </data>
  <data name="StatusSetOffsetValueTemplate" xml:space="preserve">
    <value>Value at offset {0} is now {1}.</value><comment>The term Offset should only be translated if not understandable</comment>
  </data>
  <data name="StatusModifiedSramFileHasBeenOverwrittenFilepathTemplate" xml:space="preserve">
    <value>Changed current SRAM File has been overwritten. File: {0}.</value>
  </data>
  <data name="PromtCreateNewFileInsteadOfOverwriting" xml:space="preserve">
    <value>Would you like to create a new SRAM file instead overwriting the current file? Type 1 for creating a new file (recommended) or type 2 to overwrite the existing file. In the latter case make sure to have a backup created before. 1 = new, 2 = overwrite, 0 = abort</value>
  </data>
  <data name="ErrorInvalidIndex" xml:space="preserve">
    <value>Invalid index. Aborted.</value>
  </data>
  <data name="StatusNoAvailableOtherSramFiles" xml:space="preserve">
    <value>There are currently no other SRAM files available.</value>
  </data>
  <data name="EnterIndexOfSramFileToBeOverwrittenMaxIndexTemplate" xml:space="preserve">
    <value>Enter index (0 to {0}) of the SRAM file to be overwritten (any other key to cancel):</value>
  </data>
  <data name="ErrorParamNameValueMissmatchTemplate" xml:space="preserve">
    <value>Parameter name value mismatch for: {0}</value>
  </data>
  <data name="SaveSlotOffset" xml:space="preserve">
    <value>Save slot offset</value>
  </data>
</root>