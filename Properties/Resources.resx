<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, UILanguage=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, UILanguage=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="QueuedCommands" xml:space="preserve">
    <value>Queued commands</value>
  </data>
  <data name="ErrorMissingPathArguments" xml:space="preserve">
    <value>ERROR: The program needs to be started with at least the path to current save file as a parameter. Drag 'n' drop can be used.</value>
  </data>
  <data name="StatusBytesChangedTemplate" xml:space="preserve">
    <value>{0} bytes changed.</value>
  </data>
  <data name="ConfigCurrentFileSaveSlot" xml:space="preserve">
    <value>Save slot (current file)</value>
  </data>
  <data name="ConfigComparisonFileSaveSlot" xml:space="preserve">
    <value>Save slot (Comparison file)</value>
  </data>
  <data name="EnumGameRegion" xml:space="preserve">
    <value>Game region</value>
  </data>
  <data name="ConfigColorizeOutput" xml:space="preserve">
    <value>Colorize output</value>
  </data>
  <data name="ConfigComparisonFlags" xml:space="preserve">
    <value>Comparison flags</value>
  </data>
  <data name="PromptCompareNonSaveSlotArea" xml:space="preserve">
    <value>Compare non-save slot area</value>
  </data>
  <data name="ConfigComparisonFilePath" xml:space="preserve">
    <value>Comparison filepath</value>
  </data>
  <data name="ConfigExportDirectory" xml:space="preserve">
    <value>Export directory</value>
  </data>
  <data name="ConfigCurrentFilePath" xml:space="preserve">
    <value>Current filepath</value>
  </data>
  <data name="StatusTwoDifferentSaveSlotsWillBeComparedTemplate" xml:space="preserve">
    <value>Current save slot {0} will be compared with comparison save slot {1}.</value>
  </data>
  <data name="StatusSingleSaveSlotWillBeComparedTemplate" xml:space="preserve">
    <value>Only save slot {0} will be compared.</value>
  </data>
  <data name="StatusOffsetWillBeUsedTemplate" xml:space="preserve">
    <value>Offset {0} will be used.</value><comment>The term Offset should only be translated if not understandable</comment>
  </data>
  <data name="StatusOffsetValueWillBeUsedTemplate" xml:space="preserve">
    <value>Offset value {0} will bFe set.</value><comment>The term Offset should only be translated if not understandable</comment>
  </data>
  <data name="StatusAllSaveSlotsWillBeCompared" xml:space="preserve">
    <value>All save slots will be compared.</value>
  </data>
  <data name="ErrorCannotOpenOutputFileTemplate" xml:space="preserve">
    <value>Cannot open output file "{0}" for writing</value>
  </data>
	<data name="SramOffset" xml:space="preserve">
    <value>SRAM offset</value><comment>The term Offset should only be translated if not understandable</comment>
  </data>
  <data name="AppDescription" xml:space="preserve">
    <value>This tool compares areas of SRAM.</value>
  </data>
  <data name="ErrorCommandNotImplementedTemplate" xml:space="preserve">
    <value>Command (overwrite) needs to be implemented by caller.</value>
  </data>
  <data name="EnumNone" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="StatusCurrentFileHasBeenSaved" xml:space="preserve">
    <value>Current file has been saved as comparison file.</value>
  </data>
  <data name="StatusCurrentFileHasBeenBackedUpTemplate" xml:space="preserve">
    <value>{0} has been backed-up.</value>
  </data>
  <data name="StatusFileHasBeenRestoredFromBackupTemplate" xml:space="preserve">
    <value>{0} has been restored from backup.</value>
  </data>
  <data name="CmdListCommands" xml:space="preserve">
    <value>List commands</value>
  </data>
  <data name="CmdSetCurrentSrramFileSaveSlot" xml:space="preserve">
    <value>Set current file's save slot</value>
  </data>
  <data name="CmdSetComparisonFileSaveSlot" xml:space="preserve">
    <value>Set comparison file's save slot</value>
  </data>
  <data name="CmdConfig" xml:space="preserve">
    <value>Display config</value>
  </data>
  <data name="EnumSlotByteByByteComparison" xml:space="preserve">
    <value>Slot byte-by-byte comparison</value>
  </data>
  <data name="EnumNonSlotByteByByteComparison" xml:space="preserve">
    <value>Non-slot byte-by-byte comparison</value>
  </data>
  <data name="CmdSlotByteByBytesComparison" xml:space="preserve">
    <value>Add slot byte-by-byte comparison</value>
  </data>
  <data name="CmdNonSlotByteByByteComparison" xml:space="preserve">
    <value>Add non-slot byte-by-byte comparison</value>
  </data>
  <data name="CmdOffset" xml:space="preserve">
    <value>Display offset value</value>
  </data>
  <data name="CmdEditOffset" xml:space="preserve">
    <value>Modify (and save) offset value</value><comment>The term Offset should only be translated if not understandable</comment>
  </data>
  <data name="PromptSetSaveSlotTemplate" xml:space="preserve">
    <value>Set save slot (1-{0} or any other key for all save slots) to compare:</value>
  </data>
  <data name="PromptSetSingleSaveSlotTemplate" xml:space="preserve">
    <value>Enter save slot (1-{0}):</value>
  </data>
  <data name="StatusSetSingleSaveSlotMaxTemplate" xml:space="preserve">
    <value>Save slot {0} will be used.</value>
  </data>
  <data name="PromptGetSaveSlotOffsetTemplate" xml:space="preserve">
    <value>Enter save slot {0} offset address:</value><comment>The term Offset should only be translated if not understandable</comment>
  </data>
  <data name="PromptGetSaveSlotOffsetValue" xml:space="preserve">
    <value>Set save slot offset value:</value><comment>The term Offset should only be translated if not understandable</comment>
  </data>
  <data name="Config" xml:space="preserve">
    <value>Config</value>
  </data>
  <data name="CompComparison" xml:space="preserve">
    <value>Comparison</value>
  </data>
  <data name="CompCurrent" xml:space="preserve">
    <value>Current</value>
  </data>
  <data name="CompOffset" xml:space="preserve">
    <value>Offset</value><comment>This term should only be translated if not understandable</comment>
  </data>
  <data name="CompChangeShort" xml:space="preserve">
    <value>Change</value>
  </data>
  <data name="CompOld" xml:space="preserve">
    <value>Old</value>
  </data>
  <data name="CompNew" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="CompCurrentShort" xml:space="preserve">
    <value>Curr</value><comment>This is an abbreviation and should be kept as short as possible</comment>
  </data>
  <data name="CompComparisonShort" xml:space="preserve">
    <value>Comp</value><comment>This is an abbreviation and should be kept as short as possible</comment>
  </data>
  <data name="StatusTotalDiffBytesTemplate" xml:space="preserve">
    <value>Total: {0} bytes changed (outside save slot area).</value>
  </data>
  <data name="CompUnknownAreasOnly" xml:space="preserve">
    <value>Unknowns only</value>
  </data>
  <data name="StatusUnknownsChangedBytesTemplate" xml:space="preserve">
    <value>Unknowns only: {0} bytes changed.</value>
  </data>
  <data name="CompSection" xml:space="preserve">
    <value>Section</value>
  </data>
  <data name="CompSectionSaveSlotChangedTemplate" xml:space="preserve">
    <value>All (knowns + unknowns)</value>
  </data>
  <data name="StatusSaveSlotChangedBytesTemplate" xml:space="preserve">
    <value>All (knowns + unknowns): {0} bytes changed.</value>
  </data>
  <data name="CompSectionNonSaveSlotUnknowns" xml:space="preserve">
    <value>Non-save slot unknowns</value>
  </data>
  <data name="StatusNonSaveSlotUnknownsBytesTemplate" xml:space="preserve">
    <value>Unknown non-save slot area: {0} bytes changed.</value>
  </data>
  <data name="StatusSramChangedBytesTemplate" xml:space="preserve">
    <value>{0} bytes changed.</value>
  </data>
  <data name="StatusCurrentComparisonExportedFilePathTemplate" xml:space="preserve">
    <value>Current comparison exported to "{0}".</value>
  </data>
  <data name="StatusNoSramBytesChanged" xml:space="preserve">
    <value>No bytes changed</value>
  </data>
  <data name="CompSize" xml:space="preserve">
    <value>Size</value>
  </data>
  <data name="Bytes" xml:space="preserve">
    <value>bytes</value>
  </data>
  <data name="CmdOverwriteComparisonFile" xml:space="preserve">
    <value>Overwrite (or create) comparison file with current-file</value>
  </data>
  <data name="CmdBackupCurrentFile" xml:space="preserve">
    <value>Back-up current-file</value>
  </data>
  <data name="CmdRestoreCurrentFile" xml:space="preserve">
    <value>Restore current-file from backup</value>
  </data>
  <data name="CmdBackupComparisonFile" xml:space="preserve">
    <value>Back-up comparison-file</value>
  </data>
  <data name="CmdRestoreComparisonFile" xml:space="preserve">
    <value>Restore comparison-file from backup</value>
  </data>
  <data name="CmdCompareFiles" xml:space="preserve">
    <value>Compare current-file with comparison file</value>
  </data>
  <data name="CmdClearOutput" xml:space="preserve">
    <value>Wipe previous console output</value>
  </data>
  <data name="CmdExportComparisonResult" xml:space="preserve">
    <value>Export current comparison result</value>
  </data>
  <data name="CmdSaveCurrentFileWithOtherFileName" xml:space="preserve">
    <value>Save current-file with other game file's name</value>
  </data>
  <data name="CmdQuit" xml:space="preserve">
    <value>Quit</value>
  </data>
  <data name="ErrorOperationAborted" xml:space="preserve">
    <value>Operation aborted</value>
  </data>
  <data name="EnterCommand" xml:space="preserve">
    <value>Enter command and press enter.</value>
  </data>
  <data name="StartMessage" xml:space="preserve">
    <value>New here? For command list use ({0}|?) or ({1}) for manual.</value>
  </data>
  <data name="CompSlot" xml:space="preserve">
    <value>Save slot</value>
  </data>
  <data name="All" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="CompSram" xml:space="preserve">
    <value>SRAM</value>
  </data>
  <data name="ErrorComparisonFileDoesNotExist" xml:space="preserve">
    <value>The comparison file "{0}" has not been created yet. Please create one first.</value>
  </data>
  <data name="ErrorNoValidCommandCmdTemplate" xml:space="preserve">
    <value>"{0}" is an unknown command. To list all available commands enter ({1}).</value>
  </data>
  <data name="ErrorComparisonFileSaveSlotSetButNotCurrentFileSaveSlot" xml:space="preserve">
    <value>Save slot for comparison-file can only be set if current file's save slot is set first.</value>
  </data>
  <data name="CompSameAsCurrentFileSaveSlot" xml:space="preserve">
    <value>Same as current file's save slot</value>
  </data>
  <data name="CmdGroupBackup" xml:space="preserve">
    <value>Backup</value>
  </data>
  <data name="CmdGroupComparison" xml:space="preserve">
    <value>Comparison</value>
  </data>
  <data name="CmdGroupSetsSaveSlot" xml:space="preserve">
    <value>Set save slot</value>
  </data>
  <data name="CmdGroupMisc" xml:space="preserve">
    <value>Miscellaneous</value>
  </data>
  <data name="CmdGroupDisplay" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="EnumCurrentFile" xml:space="preserve">
    <value>Current file</value>
  </data>
  <data name="EnumComparisonFile" xml:space="preserve">
    <value>Comparison file</value>
  </data>
  <data name="ErrorInvalidFileExtensionTemplate" xml:space="preserve">
    <value>The ({0}) file: [{1}] has an unsupported file extension. Did you just forget to quote the path? Supported file extensions are: {2}</value>
  </data>
  <data name="StatusCurrentHasBeenSavedAsFilePathTemplate" xml:space="preserve">
    <value>Current file has been copied as {0}.</value>
  </data>
  <data name="StatusTargetFileHasBeenBackedUpTemplate" xml:space="preserve">
    <value>Target file has been backed up as {0}.</value>
  </data>
  <data name="StatusModifiedFileHasBeenSavedAsTemplate" xml:space="preserve">
    <value>Edited current file has been saved as {0}.</value>
  </data>
  <data name="StatusGetOffsetValueTemplate" xml:space="preserve">
    <value>Value at offset {0} is currently {1}.</value><comment>The term Offset should only be translated if not understandable</comment>
  </data>
  <data name="StatusSetOffsetValueTemplate" xml:space="preserve">
    <value>Value at offset {0} is now {1}.</value><comment>The term Offset should only be translated if not understandable</comment>
  </data>
  <data name="StatusModifiedFileHasBeenOverwrittenTemplate" xml:space="preserve">
    <value>Edited current file has been overwritten. File: {0}.</value>
  </data>
  <data name="PromptCreateNewFileInsteadOfOverwriting" xml:space="preserve">
    <value>Would you like to create a new file instead of overwriting the current file? Type 1 for creating a new file (recommended) or type 2 to overwrite the existing file. In the latter case make sure to have a backup created before. 1 = new, 2 = overwrite, 0 = abort</value>
  </data>
  <data name="ErrorInvalidIndex" xml:space="preserve">
    <value>Invalid index. Aborted.</value>
  </data>
  <data name="StatusNoAvailableOtherFiles" xml:space="preserve">
    <value>There are currently no other files with same file extension available.</value>
  </data>
  <data name="EnterIndexOfFileToBeOverwrittenMaxIndexTemplate" xml:space="preserve">
    <value>Enter index (0 to {0}) of the file to be overwritten (any other key to cancel):</value>
  </data>
  <data name="ErrorParamNameValueMissmatchTemplate" xml:space="preserve">
    <value>Parameter name value mismatch for: {0}</value>
  </data>
  <data name="ConfigComparisonResultLanguage" xml:space="preserve">
    <value>Comparison result language</value>
  </data>
  <data name="ConfigUILanguage" xml:space="preserve">
    <value>UI language</value>
  </data>
  <data name="CmdLanguage" xml:space="preserve">
    <value>Set UI-language</value>
  </data>
  <data name="CmdComparisonResultLanguage" xml:space="preserve">
    <value>Set comparison result language</value>
  </data>
  <data name="CmdGroupLanguage" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="PromptSetUILanguage" xml:space="preserve">
    <value>Set the UI language (e.g. 'en' for English - without quotes). An empty input resets the setting.</value>
  </data>
  <data name="PromptSetComparionResultLanguage" xml:space="preserve">
    <value>Set the comparison result language (e.g. 'en' for English - without quotes). An empty input resets the setting.</value>
  </data>
  <data name="StatusNoGuideAvailable" xml:space="preserve">
    <value>There is no guide available</value>
  </data>
  <data name="CmdGuideSrm" xml:space="preserve">
    <value>Guide (srm)</value>
  </data>
  <data name="CmdGuideSavestate" xml:space="preserve">
    <value>Guide (savestate)</value>
  </data>
  <data name="CmdLoadConfig" xml:space="preserve">
    <value>Load config</value>
  </data>
  <data name="CmdSaveConfig" xml:space="preserve">
    <value>Save config</value>
  </data>
  <data name="ConfigFilePath" xml:space="preserve">
    <value>Config file path</value>
  </data>
  <data name="CmdGroupConfig" xml:space="preserve">
    <value>Config</value>
  </data>
  <data name="StatusConfigFileHasBeenSavedTemplate" xml:space="preserve">
    <value>Config file [{0}] has been saved.</value>
  </data>
  <data name="PromptEnterConfigName" xml:space="preserve">
    <value>Enter specific config name or empty for default config.</value>
  </data>
  <data name="CmdOpenConfig" xml:space="preserve">
    <value>Open config file</value>
  </data>
  <data name="ErrorConfigFileDoesNotExist" xml:space="preserve">
    <value>The config file [{0}] does not exist (yet).</value>
  </data>
  <data name="CmdCreateKeyBindingFile" xml:space="preserve">
    <value>Create key binding file</value>
  </data>
  <data name="CmdOpenKeyBindingFile" xml:space="preserve">
    <value>Open key binding file</value>
  </data>
  <data name="StatusKeyBindingsFileHasBeenSavedTemplate" xml:space="preserve">
    <value>Key bindings file [{0}] has been saved.</value>
  </data>
  <data name="ErrorKeyBindingsFileDoesNotExist" xml:space="preserve">
    <value>The key bindings file [{0}] does not exist (yet).</value>
  </data>
  <data name="ErrorSavestateOffsetEditNotSupported" xml:space="preserve">
    <value>Savestate offset edit is currently not supported.</value>
  </data>
</root>